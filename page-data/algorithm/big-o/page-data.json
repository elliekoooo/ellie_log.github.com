{"componentChunkName":"component---src-pages-index-tsx","path":"/algorithm/big-o/","result":{"data":{"markdownRemark":{"id":"67d9d541-d8dd-543b-9428-897e702a31d4","rawMarkdownBody":"\n# Big O\n\n_Reference; Cracking The Coding Interview_\n\n\n### Time Complexity\n* What the concept of asymptotic runtime, Big O time.\n\t\n    * Electronic Transfer: The size of file is going up, The time to transfer file is going up. O(s).\n    * Airplane Transfer: THe size of file is going up, The time is constant. O(1).\n    \n-  linear will at some point surpass constant\n\n* Best case / worst case / Expected case\n\n> e.g. quick sort?\n> \n> best case: when if all elements are equal, the quick sort will traverse the array once. <O(N)>\n> worst case: when if the pivot is repeatedly the biggest element in the array? => Our recursion doesn't devide the array in half, and recurse on each half <O(N^2)>\n> expected case: Sometimes the pivot will be very low or very high, but it won't always happen. <O(NlogN)>\n\n### Space complexity\n\n* the amount of memory or space required by algorithm.\n\t\n    * array size of n -> O(n) space.\t\n    * two-dimensinal array of size nxn -> O(n*) space.\n    \n** stack space in recursive calls counts\n \n```java\n\t\n    int sum(int n) {\n    \t\n        if(n <= 0)\n        \treturn;\n   \t\t\n        return n + sum(n-1);\n   }    \n```\n\n sum(4) -> sum(3) -> sum(2) -> sum(1)\n - each of there calls is added to the call stack and takes up actual memory.\n\n** because you have n calls, that doesn't mean it takes O(n) space.\n\n```java\n\nint pairSumSequenceFirst() {\n\tint sum = 0;\n    \n    for(int i = 0; i < n; i++ {\n    \tsum += pairSum(i, i+1);   \n    }\n    \n    return sum;\n}\n\nint pairSum(int a, int b){\n\treturn a+b;\n}\n```\n\n* Drop the constants\n* Drop the Non-Dominant Terms\n* Multi-part Algorithms: Add vs Mutiply.\n\n> O(A+B)\n\n>  ```java\n>    for(int a: arrA) {\n>        print(a)\n>    };\n>\n>    for(int b: arrB) {\n>        print(b)\n>    };\n>    ```\n\n> O(A*B)\n\n> ```java\n>\tfor(int a: arrA){\n>\t\tfor(int b: arrB{\n>\t\t\tpinrt(a + \",\" + b);\n>\t\t}\n>\t}\t\n> ```\n\n* Amortized Time\n* Log N Runtimes\n\t- When you see a problem where the number of elements in the problem space gets halved each time, that will likely be a O(logN) runtime.\n    \n* Recursive Runtimes \n\n### test title\n\ntitle\ntest","frontmatter":{"category":"algorithm"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#big-o\">Big O</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#time-complexity\">Time Complexity</a></li>\n<li><a href=\"#space-complexity\">Space complexity</a></li>\n<li><a href=\"#test-title\">test title</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","html":"<h1 id=\"big-o\" style=\"position:relative;\"><a href=\"#big-o\" aria-label=\"big o permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big O</h1>\n<p><em>Reference; Cracking The Coding Interview</em></p>\n<h3 id=\"time-complexity\" style=\"position:relative;\"><a href=\"#time-complexity\" aria-label=\"time complexity permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time Complexity</h3>\n<ul>\n<li>\n<p>What the concept of asymptotic runtime, Big O time.</p>\n<ul>\n<li>Electronic Transfer: The size of file is going up, The time to transfer file is going up. O(s).</li>\n<li>Airplane Transfer: THe size of file is going up, The time is constant. O(1).</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>linear will at some point surpass constant</li>\n</ul>\n<ul>\n<li>Best case / worst case / Expected case</li>\n</ul>\n<blockquote>\n<p>e.g. quick sort?</p>\n<p>best case: when if all elements are equal, the quick sort will traverse the array once. &#x3C;O(N)>\nworst case: when if the pivot is repeatedly the biggest element in the array? => Our recursion doesn't devide the array in half, and recurse on each half &#x3C;O(N^2)>\nexpected case: Sometimes the pivot will be very low or very high, but it won't always happen. &#x3C;O(NlogN)></p>\n</blockquote>\n<h3 id=\"space-complexity\" style=\"position:relative;\"><a href=\"#space-complexity\" aria-label=\"space complexity permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Space complexity</h3>\n<ul>\n<li>\n<p>the amount of memory or space required by algorithm.</p>\n<ul>\n<li>array size of n -> O(n) space.</li>\n<li>two-dimensinal array of size nxn -> O(n*) space.</li>\n</ul>\n</li>\n</ul>\n<p>** stack space in recursive calls counts</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\t\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n   \t\t\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>    </code></pre></div>\n<p>sum(4) -> sum(3) -> sum(2) -> sum(1)</p>\n<ul>\n<li>each of there calls is added to the call stack and takes up actual memory.</li>\n</ul>\n<p>** because you have n calls, that doesn't mean it takes O(n) space.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">pairSumSequenceFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    \tsum <span class=\"token operator\">+=</span> <span class=\"token function\">pairSum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">pairSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Drop the constants</li>\n<li>Drop the Non-Dominant Terms</li>\n<li>Multi-part Algorithms: Add vs Mutiply.</li>\n</ul>\n<blockquote>\n<p>O(A+B)</p>\n</blockquote>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token operator\">:</span> arrA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token operator\">:</span> arrB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</blockquote>\n<blockquote>\n<p>O(A*B)</p>\n</blockquote>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token operator\">:</span> arrA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token operator\">:</span> arrB<span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token function\">pinrt</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\t</code></pre></div>\n</blockquote>\n<ul>\n<li>Amortized Time</li>\n<li>Log N Runtimes\n<ul>\n<li>When you see a problem where the number of elements in the problem space gets halved each time, that will likely be a O(logN) runtime.</li>\n</ul>\n</li>\n<li>Recursive Runtimes</li>\n</ul>\n<h3 id=\"test-title\" style=\"position:relative;\"><a href=\"#test-title\" aria-label=\"test title permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>test title</h3>\n<p>title\ntest</p>"}},"pageContext":{"id":"67d9d541-d8dd-543b-9428-897e702a31d4","slug":"/algorithm/big-o/","category":"algorithm"}},"staticQueryHashes":["1975914579"],"slicesMap":{}}