{"componentChunkName":"component---src-pages-index-tsx","path":"/algorithm/event-emitter/","result":{"data":{"markdownRemark":{"id":"415f9c2a-7ec4-5c79-8c62-3012a7bd8bc6","rawMarkdownBody":"\n# Event Emitter\n\n_Reference; Leet code_\n\n### Approach\n\n\n전역변수로 events 배열을 만들어서, eventName을 키로, Callback 함수를 값으로 하는 object를 push한다. \n\n결과적으로 이러한 형태가 된다.\n\n```typescript\n\nevents = [\n\teventName1: [callback1, callback2...]\n  \teventName2: [callback3, callback4...]\n\t...\n]  \n```\n\nunsubscribe는 간단히 pop()을 활용한다.\n\nemit은 events 배열에 저장된 함수들을 실행시켜주면 된다.\n\n\n\n\n### Code\n\n```typescript\n\ntype Callback = (...args: any[]) => any;\ntype Subscription = {\n    unsubscribe: () => void\n}\n\nclass EventEmitter {\n  events: any[] = [{}];\n\n  subscribe(eventName: string, callback: Callback): Subscription {  \n    if(callback == undefined)\n      return;\n    \n    if(this.events[eventName] == undefined)\n      this.events[eventName] = [];\n\n    this.events[eventName].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this.events[eventName]?.pop();\n      }\n    };\n  }\n\n  emit(eventName: string, args: any[] = []): any {\n    return this.events[eventName]?.map(callback => callback(...args)) ?? [];\n  }\n}\n\n\n```","frontmatter":{"category":"algorithm"}}},"pageContext":{"id":"415f9c2a-7ec4-5c79-8c62-3012a7bd8bc6","slug":"/algorithm/event-emitter/","category":"algorithm"}},"staticQueryHashes":["4194050436"],"slicesMap":{}}